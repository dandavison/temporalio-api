// The MIT License
//
// Copyright (c) 2023 Temporal Technologies Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package temporal.api.nexus.v1;

option go_package = "go.temporal.io/api/nexus/v1;nexus";
option java_package = "io.temporal.api.nexus.v1";
option java_multiple_files = true;
option java_outer_classname = "MessageProto";
option ruby_package = "Temporalio::Api::Nexus::V1";
option csharp_namespace = "Temporalio.Api.Nexus.V1";

import "google/protobuf/struct.proto";

message HeaderValues {
    repeated string elements = 1;
}

message Payload {
    // TODO: just single value is simpler, switch to that or support HTTP?
    map<string, HeaderValues> headers = 1;
    bytes body = 2;
}

message Failure {
    string message = 1;
    map<string, string> metadata = 2;
    google.protobuf.Struct details = 3;
}

message HandlerError {
    // TODO: valid status codes
    int32 status_code = 1;
    Failure failure = 2;
}

message UnsuccessfulOperationError {
    // TODO: enum??
    string operation_state = 1;
    Failure failure = 2;
}

// A request to start an operation.
message StartOperationRequest {
    // Type of operation to start.
    string operation = 1;
    // A request ID that can be used as an idempotentency key.
    string request_id = 2;
    // Callback URL to call upon completion if the started operation is async.
    string callback = 3;
    // Full request body from the incoming HTTP request.
    bytes body = 4;
}

// A request to cancel an operation.
message CancelOperationRequest {
    // Type of operation to cancel.
    string operation = 1;
    // Operation ID as originally generated by a Handler.
    string operation_id = 2;
}

message Request {
    // HTTP request headers.
    map<string, HeaderValues> headers = 1;
    oneof variant {
        StartOperationRequest start_operation = 2;
        CancelOperationRequest cancel_operation = 3;
    }
}

message StartOperationResponseSync {
    Payload payload = 1;
}

message StartOperationResponseAsync {
    string operation_id = 1;
}

message StartOperationResponse {
    oneof variant {
        StartOperationResponseSync sync_success = 1;
        StartOperationResponseAsync async_success = 2;
        UnsuccessfulOperationError operation_error = 3;
    }
}

message Response {
    oneof variant {
        HandlerError error = 1;
        // CancelOperationResponse cancel_operation = 2;
        StartOperationResponse start_operation = 2;
    }
}
